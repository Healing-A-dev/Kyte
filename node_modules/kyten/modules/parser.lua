--[[FIND AND REPLACE PARSER MADE BY ME (HEALING)

Discord: Healing#1109]]
local parser = {}

function import(filename)
  importing = true
  if filename == "taks" then
    filename = "node_modules/kyten/modules/"..filename
    lnp(filename)
    connect(split_string)
    openwrite = io.open(filename.."_ice.lua","w")
    openwrite:write(tostring(rtble[1]))
    openwrite:close()
    require(filename.."_ice")
    os.remove(filename.."_ice.lua")
  elseif string.find(filename,"<lua>") ~= nil then
    filename = string.gsub(filename, "<lua>", "")
    require(filename)
  else
    lnp(filename)
    connect(split_string)
    openwrite = io.open(filename.."_ice.lua","w")
    openwrite:write(tostring(rtble[1]))
    openwrite:close()
    require(filename.."_ice")
    os.remove(filename.."_ice.lua")
  end
  importing = false
end

function table.place(table, value, position)
  position = position or nil
  if position ~= nil then
    table[position] = value
  else
    table[#table+1] = value
  end
end

function getln(string)
  string = string or nil
  if string~=nil and string == "*l" or string~=nil and string == "*a" or string~=nil and string == "*number" then 
    return io.read(string)
  elseif string~=nil then
    io.write(string)
    return io.read()
  else
    return io.read()
  end
end


function math.genrand(num1, num2)
  math.randomseed(os.time())
  return math.random(num1, num2)
end

function lnp(f)
  split_string = {}
  tokenTable = {}
  syntaxTable = {}
  splitSyntaxTable = {}
  local l = {}
  local iph = 'format "sh.io";'
  local n = 0
  local v = 0
  local value
  local ints = {'1','2','3','4','5','6','7','8','9','0'}
  local n_chars = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','_'}
  local o_chars = {'+','-','*','/','^','%'}
  local whitespace = {" ","\n","\t"}
  local special = {'"',":",";","(",")","{","}",".",",","#","="}
  fileName = f
  file = io.open(f..".ky")
  lines = file:lines()
  for line in lines do
    syntaxTable[#syntaxTable+1] = line
    l[#l+1] = line
  end
  file:close()
  if string.find(l[1],iph) ~= 1 and not importing and fileName == "index" then
    error("index.ky:1: missing ("..iph..")",9)
  end
  if string.find(l[1],iph) == 1 then
    table.remove(l,1)
  end
  for _,i in pairs(syntaxTable) do
    v = v +1
    for s = 1, syntaxTable[v]:len() do
      local str = syntaxTable[v]:sub(s,s)
      splitSyntaxTable[#splitSyntaxTable+1] = str
    end
  end
  for _,i in pairs(l) do
    n = n +1
    for s = 1, l[n]:len() do
      local str = l[n]:sub(s,s)
      split_string[#split_string+1] = str
    end
  end
  for _,i in pairs(split_string) do
    value = nil
    local t = 0
    for _,s in pairs(special) do
      if i == s then
        if i == ";" then
          value = "End of Line"
        elseif i == ":" then
          value = "Function/Method Character"
        elseif i == "(" then
          value = "Function Opener"
        elseif i == ")" then
          value = "Function Closer"
        elseif i == "{" then
          value = "Open Brace"
        elseif i == "}" then
          value = "Close Brace"
        else
          value = "special"
        end
      end
    end
    for _,w in pairs(whitespace) do
      if i == w then
        value = "whitespace"
      end
    end
    for _,n in pairs(ints) do
      t = t + 1
      if i == n and i[t-1] ~= '"' then
        value = "integer"
      end
    end
    for _,c in pairs(n_chars) do
      if i == c or i == c:upper() then
        value =  "character"
      end
    end
    for _,o in pairs(o_chars) do
      if i == o then
        value = "operator"
      end
    end
    tokenTable[#tokenTable+1] = tostring(value)
  end
  return split_string, tokenTable, fileName, splitSyntaxTable
end

function connect(tble)
-- Variables, Tables, And Bools
  local testnum = 1
  local alpha = 0
  local cpos = 0
  string = ""
  local fs = false
  rtble = {}
  local ifs = false
  local mlc = false
  local tv = false
  local instr = false
  local ws = false
  local ip_p = false
  local cmt = false
  local ittv = false
  local pmlc = false
  local ptv = false
  local pv= false
  local vl = ""
  local num = 0
  
  for l,v in pairs(tble) do --> Syntax Creator. For those wondering how it works (if you care), basically, you have to spell out each function or key word letter by letter (I know its really inefficient) and then change it to what its value in Lua will be (since it is coded in Lua).
    cpos = cpos + 1
    if split_string[cpos] == "#" and split_string[cpos+1] == "#" and split_string[cpos+2] == "#" and not mlc and not instr then
      tble[cpos] = "-"
      tble[cpos+1] = "-"
      tble[cpos+2] = "[["
      mlc = true
    elseif split_string[cpos] == "#" and split_string[cpos+1] == "#" and split_string[cpos+2] == "#" and mlc and not instr then
      tble[cpos] = "]"
      tble[cpos+1] = "]"
      tble[cpos+2] = "\n"
      mlc = false
    elseif split_string[cpos] == "-" and split_string[cpos+1] == "#" and not instr then
      tble[cpos] = "--"
      tble[cpos+1] = ""
      cmt = true
    elseif split_string[cpos] == "-" and split_string[cpos+1] == "-" and not instr then
      if tokenTable[cpos+2] == "whitespace" then
        error(fileName..".ky: Invalid syntax near ".."'"..split_string[cpos+3].."'",9)
      elseif tokenTable[cpos+2] ~= "whitespace" then
        error(fileName..".ky: Invalid syntax near ".."'"..split_string[cpos+2].."'",9)
      end
    end
    if split_string[cpos] == "i" and split_string[cpos + 1] == "f" and not instr and not cmt and not mlc then
      ifs = true
      ittv = true
    elseif split_string[cpos] == "e" and split_string[cpos+1] == "l" and split_string[cpos+2] == "s" and split_string[cpos+3] == "e" and not cmt and not mlc then
      ittv = true
    elseif split_string[cpos] == "e" and split_string[cpos+1] == "l" and split_string[cpos+2] == "s" and split_string[cpos+3] == "e" and split_string[cpos+4] == "i" and split_string[cpos+5] == "f" and not instr and not cmt and not mlc then
      ifs = true
      ittv= true
    elseif split_string[cpos] == "w" and split_string[cpos+1] == "h" and split_string[cpos+2] == "i" and split_string[cpos+3] == "l" and split_string[cpos+4] == "e" and not instr then
      ws = true
      ittv = true
    elseif split_string[cpos] == "f" and split_string[cpos+1] == "o" and split_string[cpos+2] == "r" and not instr and not cmt and not mlc then
      ws = true
      fs = true
      ittv = true
    end
    if split_string[cpos] == "p" and split_string[cpos+1] == "a" and split_string[cpos+2] == "i" and split_string[cpos+3] == "r" and split_string[cpos+4] == "s" and not instr or split_string[cpos] == "i" and split_string[cpos+1] == "p" and split_string[cpos+2] == "a" and split_string[cpos+3] == "i" and split_string[cpos+4] == "r" and split_string[cpos+5] == "s" and not instr then
      ip_p = true
    elseif split_string[cpos] == "s" and split_string[cpos+1] == "e" and split_string[cpos+2] == "l" and not instr then
      tble[cpos] = "select"
      tble[cpos+1] = ""
      tble[cpos+2] = ""
      ip_p = true
    end
    if tokenTable[cpos] == "Function Closer" and ip_p then
      ip_p = false
    end
    if tokenTable[cpos] == "Function Opener" and fs and not ip_p then
      tble[cpos] = ""
    elseif tokenTable[cpos] == "Function Closer" and fs and not ip_p then
      tble[cpos] = ""
      fs = false
    end
    if tokenTable[cpos] == "Open Brace" and tokenTable[cpos - 1] == "whitespace" and not cmt and not mlc or tokenTable[cpos] == "Open Brace" and tokenTable[cpos - 1] == "special" and not cmt and not mlc then
      tv = true
    end
    if tokenTable[cpos] == "End of Line" and not instr or tokenTable[cpos] == "Open Brace" and not tv and not instr then
      tble[cpos] = "\n"
      cmt = false
      tv = false
      ptv = true
    end
    if tokenTable[cpos] == "Open Brace" and not tv and not cmt and not mlc and not instr or tokenTable[cpos] == "Close Brace" and not tv and tokenTable[cpos+1] ~= "Close Brace" and not cmt and not mlc and not instr then
      tble[cpos] = " "
    elseif tokenTable[cpos] == "Open Brace" and not tv and not cmt and not mlc and not instr and ittv then
      ittv = false
    elseif tokenTable[cpos] == "Close Brace" and not tv and not cmt and not mlc and not instr and ittv then
      ittv = false
    elseif tv and tokenTable[cpos] == "Close Brace" and tokenTable[cpos+1] ~= "Close Brace" then
      tble[cpos] = "}"
    end
    if tokenTable[cpos] == "Function/Method Character" and split_string[cpos+1] == "s" and split_string[cpos+2] == "e" and split_string[cpos+3] == "t" and not ifs and not cmt and not mlc then
      tble[cpos] = ""
      tble[cpos+1] = "."
      tble[cpos+2] = "_"
      tble[cpos+3] = ""
    end
    if tokenTable[cpos] == "Function/Method Character" and tokenTable[cpos - 1] == "Function Closer" and tokenTable[cpos - 1] ~= "character" and not cmt and not mlc then
      tble[cpos] = "\n"
      tv = false
    end
    if tokenTable[cpos] == "Function/Method Character" and ifs and not instr and split_string[cpos -1] ~= ")" then
      tble[cpos] = ":"
    elseif tokenTable[cpos] == "Function/Method Character" and ifs then
      tble[cpos] = " then\n"
      ifs = false
    elseif tokenTable[cpos] == "Function/Method Character" and ws then
      tble[cpos] = " do\n"
      ws = false
    elseif split_string[cpos] == "!" and ifs then
      tble[cpos] = "~"
    elseif split_string[cpos] == "~" and ifs then
      error(fileName..".cone: unexpected symbol near '"..split_string[cpos+1].."'",9)
    end
    if split_string[cpos] == '"' and not instr or split_string[cpos] == "'" and not instr then
      instr = true
    elseif split_string[cpos] == '"' and instr or split_string[cpos] == "'" and instr then
      instr = false
    end
    if split_string[cpos] == "|" and split_string[cpos+1] == "|" and not instr and not cmt and not mlc then
      tble[cpos] = "o"
      tble[cpos+1] = "r"
    elseif split_string[cpos] == "&" and split_string[cpos+1] == "&" and not instr and not cmt and not mlc then
      tble[cpos] = "and"
      tble[cpos+1] = ""
    end
    if split_string[cpos] == "p" and split_string[cpos+1] == "u" and split_string[cpos+2] == "t" and split_string[cpos+3] == "l" and split_string[cpos+4] == "n" and tokenTable[cpos] ~= "Function Opener" and not instr and not tv and not pv then
      tble[cpos] = "p"
      tble[cpos+1] = "r"
      tble[cpos+2] = "i"
      tble[cpos+3] = "n"
      tble[cpos+4] = "t("
      pv = true
    elseif split_string[cpos] == "p" and split_string[cpos+1] == "u" and split_string[cpos+2] == "t" and split_string[cpos+3] == "l" and split_string[cpos+4] == "n" and tokenTable[cpos] == "Function Opener" and not instr and not tv then
      tble[cpos] = "p"
      tble[cpos+1] = "r"
      tble[cpos+2] = "i"
      tble[cpos+3] = "n"
      tble[cpos+4] = "t("
    elseif split_string[cpos] == "i" and split_string[cpos+1] == "m" and split_string[cpos+2] == "p" and split_string[cpos+3] == "o" and split_string[cpos+4] == "r" and split_string[cpos+5] == "t" and tokenTable[cpos+6] == "whitespace" and not instr then
      tble[cpos] = "i"
      tble[cpos+1] = "m"
      tble[cpos+2] = "p"
      tble[cpos+3] = "o"
      tble[cpos+4] = "r"
      tble[cpos+5] = "t".."("
      pv = true
    elseif pv and split_string[cpos] == "%" and not instr then
      tble[cpos] = ".."
    elseif pv and tokenTable[cpos] == "End of Line" then
      tble[cpos] = ")"..split_string[cpos]
      pv = false
    end
    if split_string[cpos] == "f" and split_string[cpos+1] == "u" and split_string[cpos+2] == "n" and split_string[cpos+3] == "c" and tokenTable[cpos -1] == "End of Line" and tokenTable[cpos+4] == "whitespace" and not instr or split_string[cpos] == "f" and split_string[cpos+1] == "u" and split_string[cpos+2] == "n" and split_string[cpos+3] == "c" and tokenTable[cpos+4] == "Function Opener" and not instr then
      tble[cpos] = "fun"
      tble[cpos+1] = "ct"
      tble[cpos+2] = "io"
      tble[cpos+3] = "n"
      ittv = true
    end
    if split_string[cpos] == "e" and split_string[cpos+1] == "r" and split_string[cpos+2] == "r" and tokenTable[cpos+3] == "Function Opener" and not cmt and not mlc and not instr then
      tble[cpos] = "error"
      tble[cpos+1] = ""
      tble[cpos+2] = ""
    end
    string = tostring(string..tble[cpos])
  end
  
  for _,i in pairs(syntaxTable) do --> End Of Line Syntax / and Multi-line Comment Checker
    vl = ""
    alpha = alpha + (#syntaxTable[testnum])
    if alpha + #syntaxTable[testnum] == last_num then
      vl = "nil"
      num = testnum
    else
      num = testnum
      vl = splitSyntaxTable[alpha]
    end
    if vl == "{" and not ptv then
      ptv = true
    elseif vl == ";" and ptv or vl == "}" and ptv then
      ptv  = false
    end
    if vl == "#" and not pmlc then
      pmlc = true
    elseif vl == "#" and pmlc then
      pmlc = false
    end
    if vl ~= "nil" and vl ~= ";" and vl ~= "{" and vl ~= "#" and not pmlc and not ptv or vl == "," and not ptv then
      error(fileName..".ky:"..num..": <eol> syntax error",9)
    end
    testnum = testnum + 1
    last_num = alpha
  end
  rtble[#rtble+1] = string --> Lua code
  return rtble
end

return parser